import { createI18n } from 'vue-i18n'

const messages = {
  en: {
    common: {
      refresh: 'Refresh',
      create: 'Create',
      details: 'Details',
      descriptions: 'Descriptions',
      config: 'Config',
      delete: 'Delete',
      action: 'Action',
      start: 'Start',
      stop: 'Stop',
      submit: 'Submit',
      reset: 'Reset',
      cancel: 'Cancel',
      yes: 'Yes',
      no: 'No',
      selectNode: 'Select node',
      confirmDelete: 'Confirm delete?',
    },
    nav: {
      home: 'Home',
      assignments: 'Assignments',
      nodes: 'Nodes',
      apps: 'Apps',
      services: 'Services',
      workflows: 'Workflows',
      tasks: 'Tasks',
      deployments: 'Deployments',
      resources: 'Resources',
      workers: 'Workers',
      language: 'Language'
    },
    home: {
      welcome: {
        title: 'Welcome to Plum',
        subtitle: 'Distributed Task Orchestration Platform'
      },
      buttons: {
        refresh: 'Refresh Data',
        createDeployment: 'Create Deployment'
      },
      cards: {
        nodes: 'Nodes',
        deployments: 'Deployments',
        services: 'Services',
        artifacts: 'Artifacts',
        healthy: 'Healthy',
        unhealthy: 'Unhealthy',
        instances: 'Instances',
        endpoints: 'Endpoints',
        totalSize: 'Total Size'
      },
      charts: {
        nodeHealth: 'Node Health Status',
        endpointsTop: 'Service Endpoints Distribution (Top 12)'
      },
      health: {
        healthy: 'Healthy Rate'
      },
      quickActions: {
        title: 'Quick Actions',
        createDeployment: 'Create Deployment',
        runTask: 'Run Task',
        manageResources: 'Manage Resources',
        viewWorkflows: 'View Workflows'
      },
      more: 'more',
      table: {
        node: 'Node',
        health: 'Health'
      }
    },
    deployments: {
      columns: { deploymentId: 'DeploymentID', name: 'Name', instances: 'Instances' },
      buttons: { create: 'Create Deployment' },
      stats: { deployments: 'Deployments', instances: 'Instances' },
      table: { title: 'Deployment List', items: 'items' },
      confirmDelete: 'Confirm delete this deployment? (will not cascade to instances)',
      create: {
        title: 'Create Deployment',
        form: {
          name: 'Name',
          entries: 'Entries',
          labels: 'Labels',
          selectArtifact: 'Select Artifact',
          selectNode: 'Select Node',
          startCmdPlaceholder: 'Start command (optional, override default ./start.sh)',
          keyPlaceholder: 'Key',
          valuePlaceholder: 'Value'
        },
        buttons: {
          addEntry: 'Add Entry',
          deleteEntry: 'Delete Entry',
          addReplica: 'Add Replica',
          addLabel: 'Add Label',
          create: 'Create'
        },
        validation: {
          nameRequired: 'Please enter Name',
          entriesRequired: 'Please add at least one entry',
          artifactRequired: 'Please select Artifact',
          artifactNotFound: 'Artifact not found',
          replicasRequired: 'Please configure replicas for entry'
        },
        messages: {
          created: 'Created successfully',
          createFailed: 'Create failed'
        }
      }
    },
    deploymentDetail: {
      title: 'Deployment Detail',
      buttons: { stopAll: 'Stop All', stopByNode: 'Stop By Node' },
      desc: { deploymentId: 'DeploymentID', name: 'Name', labels: 'Labels' },
      columns: { instanceId: 'InstanceID', nodeId: 'NodeID', artifact: 'Artifact', startCmd: 'StartCmd', desired: 'Desired', action: 'Action' },
      stats: { instances: 'Instances', running: 'Running', stopped: 'Stopped', healthy: 'Healthy' },
      table: { title: 'Instance List', items: 'items' }
    },
    deploymentConfig: {
      title: 'Deployment Config',
      entriesTitle: 'Entries (derived from assignments)',
      columns: { artifact: 'Artifact', startCmd: 'StartCmd', replicas: 'Replicas' },
      labelsTitle: 'Labels',
      stats: { entries: 'Entries', replicas: 'Replicas', labels: 'Labels' },
      table: { items: 'items', labels: 'labels' },
      noLabels: 'No labels configured'
    },
    assignments: {
      form: { nodeId: 'Node ID' },
      columns: { deployment: 'Deployment', instance: 'Instance', desired: 'Desired', phase: 'Phase', healthy: 'Healthy', lastReportAt: 'LastReportAt', startCmd: 'StartCmd', artifact: 'Artifact', action: 'Action' },
      stats: { total: 'Total', running: 'Running', stopped: 'Stopped', healthy: 'Healthy' },
      table: { title: 'Instance Assignments', items: 'items' },
      error: { title: 'Error' }
    },
    nodes: {
      columns: { nodeId: 'NodeID', ip: 'IP', health: 'Health', lastSeen: 'LastSeen', action: 'Action' },
      stats: { total: 'Total', healthy: 'Healthy', unhealthy: 'Unhealthy', unknown: 'Unknown' },
      table: { title: 'Node List', items: 'items' },
      error: { title: 'Error' },
      confirmDelete: 'Confirm delete this node?'
    },
    apps: {
      uploadZip: 'Upload App ZIP',
      zipTip: 'Package must include start.sh and meta.ini(name/version)',
      uploadDescription: 'Upload a ZIP file containing your application package with start.sh and meta.ini',
      buttons: { refresh: 'Refresh', selectUpload: 'Select and upload ZIP' },
      stats: { total: 'Total' },
      table: { title: 'Application Packages', items: 'items' },
      columns: { app: 'App', version: 'Version', artifact: 'Artifact', sizeBytes: 'Size(Bytes)', uploadedAt: 'UploadedAt', action: 'Action' },
      confirmDelete: 'Confirm delete this artifact?'
    },
    workers: {
      title: 'Worker Management',
      subtitle: 'Manage embedded workers and HTTP workers',
      stats: {
        totalWorkers: 'Total Workers',
        activeApps: 'Active Apps',
        supportedServices: 'Supported Services',
        healthRate: 'Health Rate'
      },
      tabs: {
        embedded: 'Embedded Workers',
        http: 'HTTP Workers'
      },
      filters: {
        appName: 'App Name',
        node: 'Node',
        status: 'Status',
        search: 'Search...'
      },
      status: {
        healthy: 'Healthy',
        warning: 'Warning',
        offline: 'Offline'
      },
      columns: {
        appInfo: 'App Info',
        node: 'Node',
        supportedTasks: 'Supported Tasks',
        status: 'Status',
        lastSeen: 'Last Seen',
        actions: 'Actions'
      },
      buttons: {
        refresh: 'Refresh',
        details: 'Details',
        delete: 'Delete'
      },
      details: {
        title: 'Worker Details',
        basicInfo: 'Basic Info',
        supportedTasks: 'Supported Tasks',
        labels: 'Labels',
        workerId: 'Worker ID',
        appName: 'App Name',
        version: 'Version',
        instanceId: 'Instance ID',
        node: 'Node',
        grpcAddress: 'gRPC Address',
        httpUrl: 'HTTP URL',
        lastHeartbeat: 'Last Heartbeat',
        capacity: 'Capacity'
      },
      messages: {
        loadFailed: 'Load failed',
        deleteSuccess: 'Delete successful',
        deleteFailed: 'Delete failed'
      },
      confirmDelete: 'Confirm delete this worker?'
    },
    services: {
      title: 'Services',
      endpointsTitle: 'Endpoints - {name}',
      stats: { services: 'Services', endpoints: 'Endpoints', healthy: 'Healthy' },
      columns: { instance: 'Instance', node: 'Node', address: 'Address', healthy: 'Healthy', lastSeen: 'LastSeen' }
    },
    workflows: {
      buttons: { refresh: 'Refresh', create: 'Create Workflow', run: 'Run', viewLatest: 'View Latest Run' },
      stats: { workflows: 'Workflows', steps: 'Steps' },
      table: { title: 'Workflow List', items: 'items' },
      columns: { workflowId: 'WorkflowID', name: 'Name', steps: 'Steps', action: 'Action' },
      dialog: {
        title: 'Create Workflow',
        form: { name: 'Name', steps: 'Steps', executor: 'Executor', timeoutSec: 'timeoutSec', maxRetries: 'maxRetries', addStep: 'Add Step', delete: 'Delete' },
        footer: { cancel: 'Cancel', submit: 'Submit' }
      }
    },
    workflowRuns: {
      title: 'Workflow Run History ({workflowId})',
      buttons: { back: '‚Üê Back to Workflows', view: 'View Details' },
      stats: { total: 'Total', succeeded: 'Succeeded', running: 'Running', failed: 'Failed' },
      table: { items: 'items' },
      columns: { runId: 'Run ID', state: 'State', createdAt: 'Created', startedAt: 'Started', finishedAt: 'Finished' }
    },
    workflowRun: {
      title: 'Workflow Run Detail',
      desc: { runId: 'RunID', workflowId: 'WorkflowID', state: 'State', created: 'Created' },
      columns: { ord: '#', step: 'Step', taskId: 'TaskID', state: 'State' }
    },
    taskDefs: {
      title: 'Task Definitions',
      buttons: { refresh: 'Refresh', create: 'Create Definition', run: 'Run', details: 'Details' },
      columns: { defId: 'DefID', name: 'Name', executor: 'Executor', target: 'Target', latestState: 'Latest State', latestTime: 'Latest Time', action: 'Action' },
      dialog: { 
        title: 'Create Task Definition', 
        form: { 
          name: 'Name', 
          executor: 'Executor', 
          targetKind: 'Target Type', 
          targetRef: 'Target Reference', 
          serviceVersion: 'Service Version', 
          serviceProtocol: 'Service Protocol', 
          servicePort: 'Service Port', 
          servicePath: 'Service Path', 
          command: 'Command' 
        }, 
        footer: { cancel: 'Cancel', submit: 'Submit' },
        help: {
          embeddedNode: 'Execute on a specific node using embedded worker',
          embeddedApp: 'Execute on workers belonging to a specific application',
          service: 'Execute via HTTP call to service endpoint',
          osProcessNode: 'Execute OS command on a specific node'
        }
      },
      stats: { total: 'Total', running: 'Running', succeeded: 'Succeeded', failed: 'Failed' },
      search: { placeholder: 'Search by name, ID, or executor...' },
      filter: { executor: 'Executor', state: 'State', all: 'All' },
      table: { title: 'Task Definitions', items: 'items' },
      status: { neverRun: 'Never Run', running: 'Running', completed: 'Completed', succeeded: 'Succeeded', failed: 'Failed', cancelled: 'Cancelled', pending: 'Pending' },
      confirm: { delete: 'Confirm delete this definition?' }
    },
    taskDefDetail: {
      title: 'TaskDefinition Detail',
      desc: { defId: 'DefID', name: 'Name', executor: 'Executor' },
      runsTitle: 'Run History',
      columns: { taskId: 'TaskID', state: 'State', created: 'Created', result: 'Result', action: 'Action' },
      buttons: { start: 'Start', cancel: 'Cancel', delete: 'Delete' },
      confirmDelete: 'Confirm delete this run?'
    },
    resources: {
      title: 'Resource Management',
      buttons: { refresh: 'Refresh', delete: 'Delete', send: 'Send', operation: 'Operation', submit: 'Submit' },
      columns: { 
        resourceId: 'Resource ID', 
        type: 'Type', 
        nodeId: 'Node', 
        status: 'Status',
        action: 'Action',
        name: 'Name',
        dataType: 'Data Type',
        defaultValue: 'Default Value',
        unit: 'Unit',
        range: 'Range',
        time: 'Time',
        stateData: 'State Data'
      },
      status: {
        healthy: 'Healthy',
        warning: 'Warning',
        offline: 'Offline'
      },
      sections: {
        resourceList: 'Resource List',
        resourceDetail: 'Resource Detail',
        resourceDescription: 'Resource Description',
        stateDescription: 'State Description',
        operationDescription: 'Operation Description',
        historyStates: 'History States (Latest 20)'
      },
      desc: {
        resourceId: 'Resource ID',
        type: 'Type',
        nodeId: 'Node',
        status: 'Status',
        createdAt: 'Created At',
        lastHeartbeat: 'Last Heartbeat'
      },
      messages: {
        selectResource: 'Please select a resource to view details',
        deleteSuccess: 'Deleted successfully',
        deleteFailed: 'Delete failed',
        operationSent: 'Operation sent successfully',
        operationFailed: 'Operation sending failed',
        loadFailed: 'Load failed',
        stateLoadFailed: 'Failed to load states'
      },
      dialogs: {
        operationTitle: 'Resource Operation'
      },
      validation: {
        rangeError: 'Value is out of range'
      },
      confirmDelete: 'Confirm delete this resource?'
    }
  },
  zh: {
    common: {
      refresh: 'Âà∑Êñ∞',
      create: 'ÂàõÂª∫',
      details: 'ËØ¶ÊÉÖ',
      descriptions: 'ÊèèËø∞',
      config: 'ÈÖçÁΩÆ',
      delete: 'Âà†Èô§',
      action: 'Êìç‰Ωú',
      start: 'ÂºÄÂßã',
      stop: 'ÂÅúÊ≠¢',
      submit: 'Êèê‰∫§',
      reset: 'ÈáçÁΩÆ',
      cancel: 'ÂèñÊ∂à',
      yes: 'ÊòØ',
      no: 'Âê¶',
      selectNode: 'ÈÄâÊã©ËäÇÁÇπ',
      confirmDelete: 'Á°ÆËÆ§Âà†Èô§Ôºü',
    },
    nav: {
      home: 'È¶ñÈ°µ',
      assignments: 'ÂàÜÈÖç',
      nodes: 'ËäÇÁÇπ',
      apps: 'Â∫îÁî®',
      services: 'ÊúçÂä°',
      workflows: 'Â∑•‰ΩúÊµÅ',
      tasks: '‰ªªÂä°',
      deployments: 'ÈÉ®ÁΩ≤',
      resources: 'ËµÑÊ∫ê',
      workers: 'Â∑•‰ΩúÂô®',
      language: 'ËØ≠Ë®Ä'
    },
    home: {
      welcome: {
        title: 'Ê¨¢Ëøé‰ΩøÁî® Plum',
        subtitle: 'ÂàÜÂ∏ÉÂºè‰ªªÂä°ÁºñÊéíÂπ≥Âè∞'
      },
      buttons: {
        refresh: 'Âà∑Êñ∞Êï∞ÊçÆ',
        createDeployment: 'ÂàõÂª∫ÈÉ®ÁΩ≤'
      },
      cards: {
        nodes: 'ËäÇÁÇπ',
        deployments: 'ÈÉ®ÁΩ≤',
        services: 'ÊúçÂä°',
        artifacts: 'Âà∂ÂìÅ',
        healthy: 'ÂÅ•Â∫∑',
        unhealthy: '‰∏çÂÅ•Â∫∑',
        instances: 'ÂÆû‰æã',
        endpoints: 'Á´ØÁÇπ',
        totalSize: 'ÊÄªÂ§ßÂ∞è'
      },
      charts: {
        nodeHealth: 'ËäÇÁÇπÂÅ•Â∫∑Áä∂ÊÄÅ',
        endpointsTop: 'ÊúçÂä°Á´ØÁÇπÂàÜÂ∏ÉÔºàTop 12Ôºâ'
      },
      health: {
        healthy: 'ÂÅ•Â∫∑Áéá'
      },
      quickActions: {
        title: 'Âø´ÈÄüÊìç‰Ωú',
        createDeployment: 'ÂàõÂª∫ÈÉ®ÁΩ≤',
        runTask: 'ËøêË°å‰ªªÂä°',
        manageResources: 'ÁÆ°ÁêÜËµÑÊ∫ê',
        viewWorkflows: 'Êü•ÁúãÂ∑•‰ΩúÊµÅ'
      },
      more: 'Êõ¥Â§ö',
      table: {
        node: 'ËäÇÁÇπ',
        health: 'ÂÅ•Â∫∑Áä∂ÊÄÅ'
      }
    },
    deployments: {
      columns: { deploymentId: 'ÈÉ®ÁΩ≤ID', name: 'ÂêçÁß∞', instances: 'ÂÆû‰æãÊï∞' },
      buttons: { create: 'ÂàõÂª∫ÈÉ®ÁΩ≤' },
      stats: { deployments: 'ÈÉ®ÁΩ≤', instances: 'ÂÆû‰æã' },
      table: { title: 'ÈÉ®ÁΩ≤ÂàóË°®', items: 'È°π' },
      confirmDelete: 'Á°ÆËÆ§Âà†Èô§ËØ•ÈÉ®ÁΩ≤ÔºüÔºà‰∏ç‰ºöÁ∫ßËÅîÂà†Èô§ÂÆû‰æãÂàÜÈÖçÔºâ',
      create: {
        title: 'ÂàõÂª∫ÈÉ®ÁΩ≤',
        form: {
          name: 'ÂêçÁß∞',
          entries: 'Êù°ÁõÆ',
          labels: 'Ê†áÁ≠æ',
          selectArtifact: 'ÈÄâÊã©Âà∂ÂìÅ',
          selectNode: 'ÈÄâÊã©ËäÇÁÇπ',
          startCmdPlaceholder: 'ÂêØÂä®ÂëΩ‰ª§ÔºàÂèØÈÄâÔºåË¶ÜÁõñÂåÖÈªòËÆ§ ./start.shÔºâ',
          keyPlaceholder: 'ÈîÆ',
          valuePlaceholder: 'ÂÄº'
        },
        buttons: {
          addEntry: 'Êñ∞Â¢ûÊù°ÁõÆ',
          deleteEntry: 'Âà†Èô§Êù°ÁõÆ',
          addReplica: 'Êñ∞Â¢ûÂâØÊú¨Ë°å',
          addLabel: 'Êñ∞Â¢ûÊ†áÁ≠æ',
          create: 'ÂàõÂª∫'
        },
        validation: {
          nameRequired: 'ËØ∑ËæìÂÖ•ÂêçÁß∞',
          entriesRequired: 'ËØ∑Ê∑ªÂä†Ëá≥Â∞ë‰∏ÄÊù°Êù°ÁõÆ',
          artifactRequired: 'ËØ∑ÈÄâÊã©Âà∂ÂìÅ',
          artifactNotFound: 'Âà∂ÂìÅ‰∏çÂ≠òÂú®',
          replicasRequired: 'ËØ∑‰∏∫Êù°ÁõÆÈÖçÁΩÆÂâØÊú¨'
        },
        messages: {
          created: 'ÂàõÂª∫ÊàêÂäü',
          createFailed: 'ÂàõÂª∫Â§±Ë¥•'
        }
      }
    },
    deploymentDetail: {
      title: 'ÈÉ®ÁΩ≤ËØ¶ÊÉÖ',
      buttons: { stopAll: 'ÂÖ®ÈÉ®ÂÅúÊ≠¢', stopByNode: 'ÊåâËäÇÁÇπÂÅúÊ≠¢' },
      desc: { deploymentId: 'ÈÉ®ÁΩ≤ID', name: 'ÂêçÁß∞', labels: 'Ê†áÁ≠æ' },
      columns: { instanceId: 'ÂÆû‰æãID', nodeId: 'ËäÇÁÇπID', artifact: 'Âà∂ÂìÅ', startCmd: 'ÂêØÂä®ÂëΩ‰ª§', desired: 'ÊúüÊúõÁä∂ÊÄÅ', action: 'Êìç‰Ωú' },
      stats: { instances: 'ÂÆû‰æã', running: 'ËøêË°å‰∏≠', stopped: 'Â∑≤ÂÅúÊ≠¢', healthy: 'ÂÅ•Â∫∑' },
      table: { title: 'ÂÆû‰æãÂàóË°®', items: 'È°π' }
    },
    deploymentConfig: {
      title: 'ÈÉ®ÁΩ≤ÈÖçÁΩÆ',
      entriesTitle: 'Êù°ÁõÆÔºàÊ†πÊçÆÂΩìÂâç assignments Êé®ÂØºÔºâ',
      columns: { artifact: 'Âà∂ÂìÅ', startCmd: 'ÂêØÂä®ÂëΩ‰ª§', replicas: 'ÂâØÊú¨Êï∞' },
      labelsTitle: 'Ê†áÁ≠æ',
      stats: { entries: 'Êù°ÁõÆ', replicas: 'ÂâØÊú¨', labels: 'Ê†áÁ≠æ' },
      table: { items: 'È°π', labels: '‰∏™Ê†áÁ≠æ' },
      noLabels: 'ÊöÇÊó†Ê†áÁ≠æÈÖçÁΩÆ'
    },
    assignments: {
      form: { nodeId: 'ËäÇÁÇπ ID' },
      columns: { deployment: 'ÈÉ®ÁΩ≤', instance: 'ÂÆû‰æã', desired: 'ÊúüÊúõ', phase: 'Èò∂ÊÆµ', healthy: 'ÂÅ•Â∫∑', lastReportAt: 'ÊúÄËøë‰∏äÊä•', startCmd: 'ÂêØÂä®ÂëΩ‰ª§', artifact: 'Âà∂ÂìÅ', action: 'Êìç‰Ωú' },
      stats: { total: 'ÊÄªËÆ°', running: 'ËøêË°å‰∏≠', stopped: 'Â∑≤ÂÅúÊ≠¢', healthy: 'ÂÅ•Â∫∑' },
      table: { title: 'ÂÆû‰æãÂàÜÈÖç', items: 'È°π' },
      error: { title: 'ÈîôËØØ' }
    },
    nodes: {
      columns: { nodeId: 'ËäÇÁÇπID', ip: 'IP', health: 'ÂÅ•Â∫∑Áä∂ÊÄÅ', lastSeen: 'ÊúÄËøëÊ¥ªË∑É', action: 'Êìç‰Ωú' },
      stats: { total: 'ÊÄªËÆ°', healthy: 'ÂÅ•Â∫∑', unhealthy: '‰∏çÂÅ•Â∫∑', unknown: 'Êú™Áü•' },
      table: { title: 'ËäÇÁÇπÂàóË°®', items: 'È°π' },
      error: { title: 'ÈîôËØØ' },
      confirmDelete: 'Á°ÆËÆ§Âà†Èô§ËØ•ËäÇÁÇπÔºü'
    },
    apps: {
      uploadZip: '‰∏ä‰º†Â∫îÁî®ÂåÖÔºàZIPÔºâ',
      zipTip: 'ÂåÖÂÜÖÈúÄÂåÖÂê´ start.sh ‰∏é meta.ini(name/version)',
      uploadDescription: '‰∏ä‰º†ÂåÖÂê´Â∫îÁî®Á®ãÂ∫èÂåÖÁöÑZIPÊñá‰ª∂ÔºåÈúÄË¶ÅÂåÖÂê´start.shÂíåmeta.iniÊñá‰ª∂',
      buttons: { refresh: 'Âà∑Êñ∞', selectUpload: 'ÈÄâÊã©Âπ∂‰∏ä‰º† ZIP' },
      stats: { total: 'ÊÄªÊï∞' },
      table: { title: 'Â∫îÁî®ÂåÖÂàóË°®', items: 'È°π' },
      columns: { app: 'Â∫îÁî®', version: 'ÁâàÊú¨', artifact: 'Âà∂ÂìÅ', sizeBytes: 'Â§ßÂ∞è(Â≠óËäÇ)', uploadedAt: '‰∏ä‰º†Êó∂Èó¥', action: 'Êìç‰Ωú' },
      confirmDelete: 'Á°ÆËÆ§Âà†Èô§ËØ•ÂåÖÔºü'
    },
    workers: {
      title: 'Â∑•‰ΩúÂô®ÁÆ°ÁêÜ',
      subtitle: 'ÁÆ°ÁêÜÂµåÂÖ•ÂºèÂ∑•‰ΩúÂô®ÂíåHTTPÂ∑•‰ΩúÂô®',
      stats: {
        totalWorkers: 'ÊÄªÂ∑•‰ΩúÂô®',
        activeApps: 'Ê¥ªË∑ÉÂ∫îÁî®',
        supportedServices: 'ÊîØÊåÅÊúçÂä°',
        healthRate: 'ÂÅ•Â∫∑Áéá'
      },
      tabs: {
        embedded: 'ÂµåÂÖ•ÂºèÂ∑•‰ΩúÂô®',
        http: 'HTTPÂ∑•‰ΩúÂô®'
      },
      filters: {
        appName: 'Â∫îÁî®ÂêçÁß∞',
        node: 'ËäÇÁÇπ',
        status: 'Áä∂ÊÄÅ',
        search: 'ÊêúÁ¥¢...'
      },
      status: {
        healthy: 'ÂÅ•Â∫∑',
        warning: 'Ë≠¶Âëä',
        offline: 'Á¶ªÁ∫ø'
      },
      columns: {
        appInfo: 'Â∫îÁî®‰ø°ÊÅØ',
        node: 'ËäÇÁÇπ',
        supportedTasks: 'ÊîØÊåÅÁöÑ‰ªªÂä°',
        status: 'Áä∂ÊÄÅ',
        lastSeen: 'ÊúÄÂêéÂøÉË∑≥',
        actions: 'Êìç‰Ωú'
      },
      buttons: {
        refresh: 'Âà∑Êñ∞',
        details: 'ËØ¶ÊÉÖ',
        delete: 'Âà†Èô§'
      },
      details: {
        title: 'Â∑•‰ΩúÂô®ËØ¶ÊÉÖ',
        basicInfo: 'Âü∫Êú¨‰ø°ÊÅØ',
        supportedTasks: 'ÊîØÊåÅÁöÑ‰ªªÂä°',
        labels: 'Ê†áÁ≠æ‰ø°ÊÅØ',
        workerId: 'Â∑•‰ΩúÂô®ID',
        appName: 'Â∫îÁî®ÂêçÁß∞',
        version: 'ÁâàÊú¨',
        instanceId: 'ÂÆû‰æãID',
        node: 'ËäÇÁÇπ',
        grpcAddress: 'gRPCÂú∞ÂùÄ',
        httpUrl: 'HTTPÂú∞ÂùÄ',
        lastHeartbeat: 'ÊúÄÂêéÂøÉË∑≥',
        capacity: 'ÂÆπÈáè'
      },
      messages: {
        loadFailed: 'Âä†ËΩΩÂ§±Ë¥•',
        deleteSuccess: 'Âà†Èô§ÊàêÂäü',
        deleteFailed: 'Âà†Èô§Â§±Ë¥•'
      },
      confirmDelete: 'Á°ÆËÆ§Âà†Èô§ËØ•Â∑•‰ΩúÂô®Ôºü'
    },
    services: {
      title: 'ÊúçÂä°',
      endpointsTitle: 'Á´ØÁÇπ - {name}',
      stats: { services: 'ÊúçÂä°', endpoints: 'Á´ØÁÇπ', healthy: 'ÂÅ•Â∫∑' },
      columns: { instance: 'ÂÆû‰æã', node: 'ËäÇÁÇπ', address: 'Âú∞ÂùÄ', healthy: 'ÂÅ•Â∫∑', lastSeen: 'ÊúÄËøëÊ¥ªË∑É' }
    },
    workflows: {
      buttons: { refresh: 'Âà∑Êñ∞', create: 'ÂàõÂª∫Â∑•‰ΩúÊµÅ', run: 'ËøêË°å', viewLatest: 'Êü•ÁúãÊúÄÊñ∞ËøêË°å' },
      stats: { workflows: 'Â∑•‰ΩúÊµÅ', steps: 'Ê≠•È™§' },
      table: { title: 'Â∑•‰ΩúÊµÅÂàóË°®', items: 'È°π' },
      columns: { workflowId: 'Â∑•‰ΩúÊµÅID', name: 'ÂêçÁß∞', steps: 'Ê≠•È™§', action: 'Êìç‰Ωú' },
      dialog: {
        title: 'ÂàõÂª∫Â∑•‰ΩúÊµÅ',
        form: { name: 'ÂêçÁß∞', steps: 'Ê≠•È™§', executor: 'ÊâßË°åÂô®', timeoutSec: 'Ë∂ÖÊó∂Áßí', maxRetries: 'ÊúÄÂ§ßÈáçËØï', addStep: 'Ê∑ªÂä†Ê≠•È™§', delete: 'Âà†Èô§' },
        footer: { cancel: 'ÂèñÊ∂à', submit: 'Êèê‰∫§' }
      }
    },
    workflowRuns: {
      title: 'Â∑•‰ΩúÊµÅËøêË°åÂéÜÂè≤ ({workflowId})',
      buttons: { back: '‚Üê ËøîÂõûÂ∑•‰ΩúÊµÅÂàóË°®', view: 'Êü•ÁúãËØ¶ÊÉÖ' },
      stats: { total: 'ÊÄªËÆ°', succeeded: 'ÊàêÂäü', running: 'ËøêË°å‰∏≠', failed: 'Â§±Ë¥•' },
      table: { items: 'È°π' },
      columns: { runId: 'ËøêË°åID', state: 'Áä∂ÊÄÅ', createdAt: 'ÂàõÂª∫Êó∂Èó¥', startedAt: 'ÂºÄÂßãÊó∂Èó¥', finishedAt: 'ÁªìÊùüÊó∂Èó¥' }
    },
    workflowRun: {
      title: 'Â∑•‰ΩúÊµÅËøêË°åËØ¶ÊÉÖ',
      desc: { runId: 'ËøêË°åID', workflowId: 'Â∑•‰ΩúÊµÅID', state: 'Áä∂ÊÄÅ', created: 'ÂàõÂª∫Êó∂Èó¥' },
      columns: { ord: '#', step: 'Ê≠•È™§', taskId: '‰ªªÂä°ID', state: 'Áä∂ÊÄÅ' }
    },
    taskDefs: {
      title: '‰ªªÂä°ÂÆö‰πâ',
      buttons: { refresh: 'Âà∑Êñ∞', create: 'ÂàõÂª∫ÂÆö‰πâ', run: 'ËøêË°å', details: 'ËØ¶ÊÉÖ' },
      columns: { defId: 'ÂÆö‰πâID', name: 'ÂêçÁß∞', executor: 'ÊâßË°åÂô®', target: 'ÁõÆÊ†á', latestState: 'ÊúÄÊñ∞Áä∂ÊÄÅ', latestTime: 'ÊúÄÊñ∞Êó∂Èó¥', action: 'Êìç‰Ωú' },
      dialog: { 
        title: 'ÂàõÂª∫‰ªªÂä°ÂÆö‰πâ', 
        form: { 
          name: 'ÂêçÁß∞', 
          executor: 'ÊâßË°åÂô®', 
          targetKind: 'ÁõÆÊ†áÁ±ªÂûã', 
          targetRef: 'ÁõÆÊ†áÂºïÁî®', 
          serviceVersion: 'ÊúçÂä°ÁâàÊú¨', 
          serviceProtocol: 'ÊúçÂä°ÂçèËÆÆ', 
          servicePort: 'ÊúçÂä°Á´ØÂè£', 
          servicePath: 'Ë∞ÉÁî®Ë∑ØÂæÑ', 
          command: 'ÂëΩ‰ª§' 
        }, 
        footer: { cancel: 'ÂèñÊ∂à', submit: 'Êèê‰∫§' },
        help: {
          embeddedNode: 'Âú®ÊåáÂÆöËäÇÁÇπ‰∏ä‰ΩøÁî®ÂµåÂÖ•ÂºèÂ∑•‰ΩúÂô®ÊâßË°å',
          embeddedApp: 'Âú®Â±û‰∫éÁâπÂÆöÂ∫îÁî®ÁöÑÂµåÂÖ•ÂºèÂ∑•‰ΩúÂô®‰∏äÊâßË°å',
          service: 'ÈÄöËøáHTTPË∞ÉÁî®ÊúçÂä°Á´ØÁÇπÊâßË°å',
          osProcessNode: 'Âú®ÊåáÂÆöËäÇÁÇπ‰∏äÊâßË°åÊìç‰ΩúÁ≥ªÁªüÂëΩ‰ª§'
        }
      },
      stats: { total: 'ÊÄªÊï∞', running: 'ËøêË°å‰∏≠', succeeded: 'ÊàêÂäü', failed: 'Â§±Ë¥•' },
      search: { placeholder: 'ÊåâÂêçÁß∞„ÄÅIDÊàñÊâßË°åÂô®ÊêúÁ¥¢...' },
      filter: { executor: 'ÊâßË°åÂô®', state: 'Áä∂ÊÄÅ', all: 'ÂÖ®ÈÉ®' },
      table: { title: '‰ªªÂä°ÂÆö‰πâÂàóË°®', items: 'È°π' },
      status: { neverRun: '‰ªéÊú™ËøêË°å', running: 'ËøêË°å‰∏≠', completed: 'Â∑≤ÂÆåÊàê', succeeded: 'ÊàêÂäü', failed: 'Â§±Ë¥•', cancelled: 'Â∑≤ÂèñÊ∂à', pending: 'Á≠âÂæÖ‰∏≠' },
      confirm: { delete: 'Á°ÆËÆ§Âà†Èô§ËØ•ÂÆö‰πâÔºü' }
    },
    taskDefDetail: {
      title: 'TaskDefinition ËØ¶ÊÉÖ',
      desc: { defId: 'ÂÆö‰πâID', name: 'ÂêçÁß∞', executor: 'ÊâßË°åÂô®' },
      runsTitle: 'ËøêË°åÂéÜÂè≤',
      columns: { taskId: '‰ªªÂä°ID', state: 'Áä∂ÊÄÅ', created: 'ÂàõÂª∫Êó∂Èó¥', result: 'ÁªìÊûú', action: 'Êìç‰Ωú' },
      buttons: { start: 'ÂºÄÂßã', cancel: 'ÂèñÊ∂à', delete: 'Âà†Èô§' },
      confirmDelete: 'Á°ÆËÆ§Âà†Èô§ËØ•‰ªªÂä°Ôºü'
    },
    resources: {
      title: 'ËµÑÊ∫êÁÆ°ÁêÜ',
      buttons: { refresh: 'Âà∑Êñ∞', delete: 'Âà†Èô§', send: 'ÂèëÈÄÅ', operation: 'Êìç‰Ωú', submit: 'Êèê‰∫§' },
      columns: { 
        resourceId: 'ËµÑÊ∫êID', 
        type: 'Á±ªÂûã', 
        nodeId: 'ËäÇÁÇπ', 
        status: 'Áä∂ÊÄÅ',
        action: 'Êìç‰Ωú',
        name: 'ÂêçÁß∞',
        dataType: 'Êï∞ÊçÆÁ±ªÂûã',
        defaultValue: 'ÈªòËÆ§ÂÄº',
        unit: 'Âçï‰Ωç',
        range: 'ËåÉÂõ¥',
        time: 'Êó∂Èó¥',
        stateData: 'Áä∂ÊÄÅÊï∞ÊçÆ'
      },
      status: {
        healthy: 'Ê≠£Â∏∏',
        warning: 'Ë≠¶Âëä',
        offline: 'Á¶ªÁ∫ø'
      },
      sections: {
        resourceList: 'ËµÑÊ∫êÂàóË°®',
        resourceDetail: 'ËµÑÊ∫êËØ¶ÊÉÖ',
        resourceDescription: 'ËµÑÊ∫êÊèèËø∞',
        stateDescription: 'Áä∂ÊÄÅÊèèËø∞',
        operationDescription: 'Êìç‰ΩúÊèèËø∞',
        historyStates: 'ÂéÜÂè≤Áä∂ÊÄÅÔºàÊúÄËøë20Êù°Ôºâ'
      },
      desc: {
        resourceId: 'ËµÑÊ∫êID',
        type: 'Á±ªÂûã',
        nodeId: 'ËäÇÁÇπ',
        status: 'Áä∂ÊÄÅ',
        createdAt: 'ÂàõÂª∫Êó∂Èó¥',
        lastHeartbeat: 'ÊúÄÂêéÂøÉË∑≥'
      },
      messages: {
        selectResource: 'ËØ∑ÈÄâÊã©‰∏Ä‰∏™ËµÑÊ∫êÊü•ÁúãËØ¶ÊÉÖ',
        deleteSuccess: 'Âà†Èô§ÊàêÂäü',
        deleteFailed: 'Âà†Èô§Â§±Ë¥•',
        operationSent: 'Êìç‰ΩúÂèëÈÄÅÊàêÂäü',
        operationFailed: 'Êìç‰ΩúÂèëÈÄÅÂ§±Ë¥•',
        loadFailed: 'Âä†ËΩΩÂ§±Ë¥•',
        stateLoadFailed: 'Âä†ËΩΩÁä∂ÊÄÅÂ§±Ë¥•'
      },
      dialogs: {
        operationTitle: 'ËµÑÊ∫êÊìç‰Ωú'
      },
      validation: {
        rangeError: 'Êï∞ÂÄºË∂ÖÂá∫ËåÉÂõ¥'
      },
      confirmDelete: 'Á°ÆËÆ§Âà†Èô§ËØ•ËµÑÊ∫êÔºü'
    }
  }
}

export const i18n = createI18n({
  legacy: false,
  locale: 'zh',
  fallbackLocale: 'en',
  messages
})

export type MessageSchema = typeof messages


